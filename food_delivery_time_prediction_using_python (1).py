# -*- coding: utf-8 -*-
"""Food Delivery Time Prediction using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-yIxMRIGX8CwsrFOC7YhNqzCUPhbR0FY
"""

import pandas as pd
import numpy as np
import plotly.express as px

data = pd.read_csv("deliverytime.txt")

print(data.head())

data.info()

data.isnull().sum()

import numpy as np
import pandas as pd

# Set the Earth's radius (in kilometers)
R = 6371

# Convert degrees to radians
def deg_to_rad(degrees):
    return degrees * (np.pi / 180)

# Function to calculate the distance between two points using the Haversine formula
def distcalculate(lat1, lon1, lat2, lon2):
    d_lat = deg_to_rad(lat2 - lat1)
    d_lon = deg_to_rad(lon2 - lon1)
    a = (np.sin(d_lat / 2) ** 2 +
         np.cos(deg_to_rad(lat1)) *
         np.cos(deg_to_rad(lat2)) *
         np.sin(d_lon / 2) ** 2)
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

# Assuming you already have a DataFrame `data` with the relevant coordinates
data['distance'] = distcalculate(data['Restaurant_latitude'],
                                  data['Restaurant_longitude'],
                                  data['Delivery_location_latitude'],
                                  data['Delivery_location_longitude'])

# Commented out IPython magic to ensure Python compatibility.
# %pip install plotly
# %pip install nbformat

print(data.head())

# Commented out IPython magic to ensure Python compatibility.
# %pip install statsmodels
data['Time_taken(min)'] = data['Time_taken(min)'].astype(str)

# Clean and convert 'Time_taken(min)' to numeric
data['Time_taken(min)'] = data['Time_taken(min)'].str.replace('(min)', '', regex=True).str.strip()

# Convert the cleaned values to numeric
data['Time_taken(min)'] = pd.to_numeric(data['Time_taken(min)'], errors='coerce')

# Debugging: Check for NaN values in Time_taken(min)
print(data['Time_taken(min)'].head(10))

# Handle missing values in 'Time_taken(min)'
data['Time_taken(min)'] = data['Time_taken(min)'].fillna(data['Time_taken(min)'].mean())

# Drop any remaining rows with NaN values
data.dropna(subset=['distance', 'Time_taken(min)'], inplace=True)

# Ensure data isn't empty after cleaning
if not data.empty:
    # Create the scatter plot
    figure = px.scatter(
        data_frame=data,
        x="distance",
        y="Time_taken(min)",
        size="Time_taken(min)",
        trendline="ols",  # Include the OLS trendline
        size_max=50,  # Set a maximum marker size
        title="Relationship Between Distance and Time Taken",
        labels={"distance": "Distance (km)", "Time_taken(min)": "Time Taken (min)"}
    )
    figure.show()
else:
    print("No data available for plotting after cleaning.")

import pandas as pd
import plotly.express as px

# Load your dataset
# data = pd.read_csv('your_dataset.csv')  # Uncomment this line and specify your dataset if needed

# Check for NaN values in the relevant columns
print(data[['Delivery_person_Age', 'Time_taken(min)', 'distance']].isna().sum())

# Drop rows with NaN values in the relevant columns
data = data.dropna(subset=['Delivery_person_Age', 'Time_taken(min)', 'distance'])

# Alternatively, fill NaN values with the mean of the 'Time_taken(min)' column (uncomment if you prefer this method)
# data['Time_taken(min)'].fillna(data['Time_taken(min)'].mean(), inplace=True)

# Create the scatter plot to visualize the relationship
figure = px.scatter(
    data_frame=data,
    x="Delivery_person_Age",
    y="Time_taken(min)",
    size="Time_taken(min)",
    color="distance",  # Color by distance travelled
    trendline="ols",  # Include OLS trendline
    title="Relationship Between Time Taken and Age",
    labels={
        "Delivery_person_Age": "Age of Delivery Person",
        "Time_taken(min)": "Time Taken (min)"
    }
)

# Show the plot
figure.show()

import pandas as pd
import plotly.express as px

# Load your dataset
# data = pd.read_csv('your_dataset.csv')  # Uncomment this line and specify your dataset if needed

# Check for NaN values in the relevant columns
print(data[['Delivery_person_Ratings', 'Time_taken(min)', 'distance']].isna().sum())

# Drop rows with NaN values in the relevant columns
data = data.dropna(subset=['Delivery_person_Ratings', 'Time_taken(min)', 'distance'])

# Create the scatter plot to visualize the relationship between ratings and time taken
figure = px.scatter(
    data_frame=data,
    x="Delivery_person_Ratings",
    y="Time_taken(min)",
    size="Time_taken(min)",
    color="distance",  # Color by distance travelled
    trendline="ols",  # Include OLS trendline
    title="Relationship Between Delivery Person Ratings and Time Taken",
    labels={
        "Delivery_person_Ratings": "Ratings of Delivery Person",
        "Time_taken(min)": "Time Taken (min)"
    },
    color_continuous_scale=px.colors.sequential.Viridis,
    hover_data=["distance"]  # Show distance in hover info
)

# Update the layout for better aesthetics
figure.update_layout(
    xaxis_title="Ratings of Delivery Person",
    yaxis_title="Time Taken (min)",
    legend_title="Distance (km)",
)

# Show the plot
figure.show()

import pandas as pd
import plotly.express as px

# Load your dataset
# data = pd.read_csv('your_dataset.csv')  # Uncomment this line and specify your dataset if needed

# Check the structure of the data to ensure the relevant columns exist
print(data.head())

# Create a box plot to visualize the relationship between vehicle type, order type, and time taken
fig = px.box(
    data,
    x="Type_of_vehicle",
    y="Time_taken(min)",
    color="Type_of_order",  # Color by the type of food ordered
    title="Delivery Time by Type of Vehicle and Order Type",
    labels={
        "Type_of_vehicle": "Type of Vehicle",
        "Time_taken(min)": "Time Taken (min)",
        "Type_of_order": "Type of Order"
    }
)

# Show the plot
fig.show()

#splitting data
from sklearn.model_selection import train_test_split
x = np.array(data[["Delivery_person_Age",
                   "Delivery_person_Ratings",
                   "distance"]])
y = np.array(data[["Time_taken(min)"]])
xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.10,
                                                random_state=42)

# creating the LSTM neural network model
from keras.models import Sequential
from keras.layers import Dense, LSTM
model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (xtrain.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
model.summary()

# training the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(xtrain, ytrain, batch_size=1, epochs=9)

print("Food Delivery Time Prediction")
a = int(input("Age of Delivery Partner: "))
b = float(input("Ratings of Previous Deliveries: "))
c = int(input("Total Distance: "))

features = np.array([[a, b, c]])
print("Predicted Delivery Time in Minutes = ", model.predict(features))







